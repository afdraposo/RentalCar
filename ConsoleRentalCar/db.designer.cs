#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleRentalCar
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CarRental")]
	public partial class dbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttypeCar(typeCar instance);
    partial void UpdatetypeCar(typeCar instance);
    partial void DeletetypeCar(typeCar instance);
    partial void InsertrentalRecord(rentalRecord instance);
    partial void UpdaterentalRecord(rentalRecord instance);
    partial void DeleterentalRecord(rentalRecord instance);
    partial void InserterrorInsertData(errorInsertData instance);
    partial void UpdateerrorInsertData(errorInsertData instance);
    partial void DeleteerrorInsertData(errorInsertData instance);
    #endregion
		
		public dbDataContext() : 
				base(global::ConsoleRentalCar.Properties.Settings.Default.CarRentalConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<typeCar> typeCars
		{
			get
			{
				return this.GetTable<typeCar>();
			}
		}
		
		public System.Data.Linq.Table<rentalRecord> rentalRecords
		{
			get
			{
				return this.GetTable<rentalRecord>();
			}
		}
		
		public System.Data.Linq.Table<errorInsertData> errorInsertDatas
		{
			get
			{
				return this.GetTable<errorInsertData>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.typeCars")]
	public partial class typeCar : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _model;
		
		private System.Nullable<int> _year;
		
		private string _licensePlate;
		
		private EntitySet<rentalRecord> _rentalRecords;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnmodelChanging(string value);
    partial void OnmodelChanged();
    partial void OnyearChanging(System.Nullable<int> value);
    partial void OnyearChanged();
    partial void OnlicensePlateChanging(string value);
    partial void OnlicensePlateChanged();
    #endregion
		
		public typeCar()
		{
			this._rentalRecords = new EntitySet<rentalRecord>(new Action<rentalRecord>(this.attach_rentalRecords), new Action<rentalRecord>(this.detach_rentalRecords));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_model", DbType="VarChar(50)")]
		public string model
		{
			get
			{
				return this._model;
			}
			set
			{
				if ((this._model != value))
				{
					this.OnmodelChanging(value);
					this.SendPropertyChanging();
					this._model = value;
					this.SendPropertyChanged("model");
					this.OnmodelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_year", DbType="Int")]
		public System.Nullable<int> year
		{
			get
			{
				return this._year;
			}
			set
			{
				if ((this._year != value))
				{
					this.OnyearChanging(value);
					this.SendPropertyChanging();
					this._year = value;
					this.SendPropertyChanged("year");
					this.OnyearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_licensePlate", DbType="VarChar(50)")]
		public string licensePlate
		{
			get
			{
				return this._licensePlate;
			}
			set
			{
				if ((this._licensePlate != value))
				{
					this.OnlicensePlateChanging(value);
					this.SendPropertyChanging();
					this._licensePlate = value;
					this.SendPropertyChanged("licensePlate");
					this.OnlicensePlateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="typeCar_rentalRecord", Storage="_rentalRecords", ThisKey="id", OtherKey="typeCarID")]
		public EntitySet<rentalRecord> rentalRecords
		{
			get
			{
				return this._rentalRecords;
			}
			set
			{
				this._rentalRecords.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_rentalRecords(rentalRecord entity)
		{
			this.SendPropertyChanging();
			entity.typeCar = this;
		}
		
		private void detach_rentalRecords(rentalRecord entity)
		{
			this.SendPropertyChanging();
			entity.typeCar = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.rentalRecords")]
	public partial class rentalRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _customerName;
		
		private System.Nullable<System.DateTime> _dateRented;
		
		private System.Nullable<System.DateTime> _dateReturned;
		
		private System.Nullable<decimal> _cost;
		
		private System.Nullable<int> _typeCarID;
		
		private EntityRef<typeCar> _typeCar;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncustomerNameChanging(string value);
    partial void OncustomerNameChanged();
    partial void OndateRentedChanging(System.Nullable<System.DateTime> value);
    partial void OndateRentedChanged();
    partial void OndateReturnedChanging(System.Nullable<System.DateTime> value);
    partial void OndateReturnedChanged();
    partial void OncostChanging(System.Nullable<decimal> value);
    partial void OncostChanged();
    partial void OntypeCarIDChanging(System.Nullable<int> value);
    partial void OntypeCarIDChanged();
    #endregion
		
		public rentalRecord()
		{
			this._typeCar = default(EntityRef<typeCar>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customerName", DbType="VarChar(100)")]
		public string customerName
		{
			get
			{
				return this._customerName;
			}
			set
			{
				if ((this._customerName != value))
				{
					this.OncustomerNameChanging(value);
					this.SendPropertyChanging();
					this._customerName = value;
					this.SendPropertyChanged("customerName");
					this.OncustomerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateRented", DbType="DateTime")]
		public System.Nullable<System.DateTime> dateRented
		{
			get
			{
				return this._dateRented;
			}
			set
			{
				if ((this._dateRented != value))
				{
					this.OndateRentedChanging(value);
					this.SendPropertyChanging();
					this._dateRented = value;
					this.SendPropertyChanged("dateRented");
					this.OndateRentedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateReturned", DbType="DateTime")]
		public System.Nullable<System.DateTime> dateReturned
		{
			get
			{
				return this._dateReturned;
			}
			set
			{
				if ((this._dateReturned != value))
				{
					this.OndateReturnedChanging(value);
					this.SendPropertyChanging();
					this._dateReturned = value;
					this.SendPropertyChanged("dateReturned");
					this.OndateReturnedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cost", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> cost
		{
			get
			{
				return this._cost;
			}
			set
			{
				if ((this._cost != value))
				{
					this.OncostChanging(value);
					this.SendPropertyChanging();
					this._cost = value;
					this.SendPropertyChanged("cost");
					this.OncostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeCarID", DbType="Int")]
		public System.Nullable<int> typeCarID
		{
			get
			{
				return this._typeCarID;
			}
			set
			{
				if ((this._typeCarID != value))
				{
					if (this._typeCar.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeCarIDChanging(value);
					this.SendPropertyChanging();
					this._typeCarID = value;
					this.SendPropertyChanged("typeCarID");
					this.OntypeCarIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="typeCar_rentalRecord", Storage="_typeCar", ThisKey="typeCarID", OtherKey="id", IsForeignKey=true)]
		public typeCar typeCar
		{
			get
			{
				return this._typeCar.Entity;
			}
			set
			{
				typeCar previousValue = this._typeCar.Entity;
				if (((previousValue != value) 
							|| (this._typeCar.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._typeCar.Entity = null;
						previousValue.rentalRecords.Remove(this);
					}
					this._typeCar.Entity = value;
					if ((value != null))
					{
						value.rentalRecords.Add(this);
						this._typeCarID = value.id;
					}
					else
					{
						this._typeCarID = default(Nullable<int>);
					}
					this.SendPropertyChanged("typeCar");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.errorInsertData")]
	public partial class errorInsertData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _errorLine;
		
		private string _errorTable;
		
		private string _errorMessage;
		
		private string _namefile;
		
		private System.DateTime _errorDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnerrorLineChanging(string value);
    partial void OnerrorLineChanged();
    partial void OnerrorTableChanging(string value);
    partial void OnerrorTableChanged();
    partial void OnerrorMessageChanging(string value);
    partial void OnerrorMessageChanged();
    partial void OnnamefileChanging(string value);
    partial void OnnamefileChanged();
    partial void OnerrorDateChanging(System.DateTime value);
    partial void OnerrorDateChanged();
    #endregion
		
		public errorInsertData()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_errorLine", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string errorLine
		{
			get
			{
				return this._errorLine;
			}
			set
			{
				if ((this._errorLine != value))
				{
					this.OnerrorLineChanging(value);
					this.SendPropertyChanging();
					this._errorLine = value;
					this.SendPropertyChanged("errorLine");
					this.OnerrorLineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_errorTable", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string errorTable
		{
			get
			{
				return this._errorTable;
			}
			set
			{
				if ((this._errorTable != value))
				{
					this.OnerrorTableChanging(value);
					this.SendPropertyChanging();
					this._errorTable = value;
					this.SendPropertyChanged("errorTable");
					this.OnerrorTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_errorMessage", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string errorMessage
		{
			get
			{
				return this._errorMessage;
			}
			set
			{
				if ((this._errorMessage != value))
				{
					this.OnerrorMessageChanging(value);
					this.SendPropertyChanging();
					this._errorMessage = value;
					this.SendPropertyChanged("errorMessage");
					this.OnerrorMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_namefile", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string namefile
		{
			get
			{
				return this._namefile;
			}
			set
			{
				if ((this._namefile != value))
				{
					this.OnnamefileChanging(value);
					this.SendPropertyChanging();
					this._namefile = value;
					this.SendPropertyChanged("namefile");
					this.OnnamefileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_errorDate", DbType="DateTime NOT NULL")]
		public System.DateTime errorDate
		{
			get
			{
				return this._errorDate;
			}
			set
			{
				if ((this._errorDate != value))
				{
					this.OnerrorDateChanging(value);
					this.SendPropertyChanging();
					this._errorDate = value;
					this.SendPropertyChanged("errorDate");
					this.OnerrorDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
